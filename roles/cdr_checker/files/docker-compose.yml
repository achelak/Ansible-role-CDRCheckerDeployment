version: '2.1'

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}

services:

  prometheus:
    image: prom/prometheus:v2.16.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.20.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.34.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:7.3.4
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    image: prom/pushgateway:v1.1.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  nginx-exporter:
      image: nginx/nginx-prometheus-exporter:0.4.2
      container_name: nginx-exporter
      restart: unless-stopped
      environment:
        - SCRAPE_URI=http://nginx:80/nginx_status
        - TELEMETRY_PATH=/metrics
        - NGINX_RETRIES=10
      depends_on:
        - nginx
      ports:
        - "9113:9113"
      networks:
        - monitor-net
      #mem_limit: 128m      # for docker-compose v2 only
      #mem_reservation: 64m # for docker-compose v2 only
      logging:
          driver: "json-file"
          options:
            max-size: "5m"
      labels:
        org.label-schema.group: "monitoring"


  postgres_exporter:
    container_name: postgres-exporter
    image: wrouesnel/postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      - db
    ports:
      - "9187:9187"
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  adminer:
     image: adminer:4.7.7-standalone
     container_name: adminer
     restart: always
     ports:
       - 6080:8080
     networks:
      - monitor-net
  

  nginx:
    container_name: nginx
    image: nginx:1.17
    ports:
      - 80:80
    volumes:
      - ./www/html/AudiocodesCDRChecker:/var/www/html
      - ./nginxcfg:/etc/nginx/conf.d
    depends_on:
      - api
      - php-fpm
    networks:
      - monitor-net

  php-fpm:
    container_name: php-fpm
    image: achelak/cdr_checker:php_fpm
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./www/html/AudiocodesCDRChecker:/var/www/html
    networks:
      - monitor-net


  db:
    container_name: postgres-db
    image: postgres:9.6
    restart: always
    shm_size: 2gb
    volumes:
      - ./dbpostgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - monitor-net
  

  # db:
  #   image: mysql:5.7
  #   container_name: mysql
  #   restart: always
  #   environment:
  #      MYSQL_ROOT_PASSWORD: madenci       
  #   volumes:
  #      - ./db:/var/lib/mysql
  #      - ./mysqlcfg/mysql.conf.cnf:/etc/mysql/conf.d/mysql.conf.cnf
  #   ports:
  #      - 3306:3306
  #   networks:
  #     - monitor-net

  api:
    container_name: cdr_api
    image: achelak/cdr_checker:cdr_api_5.6
    restart: always
    environment:
      API_DB_HOST: db
      API_DB_USER: ${POSTGRES_USER}
      API_DB_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./log:/opt/cdr_api/log
    depends_on:
      - db
    networks:
      - monitor-net

